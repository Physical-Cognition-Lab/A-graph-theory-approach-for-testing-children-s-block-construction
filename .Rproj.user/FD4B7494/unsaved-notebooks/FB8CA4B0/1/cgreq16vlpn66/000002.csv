"0","# Function to identify rows that have values in several ""relational block"" columns, and duplicates them, taking contents of 2/3/4 relational columns and putting them in the first relational block, so that singular moves that touch more than one block are now represented as different rows (moves)"
"0","duplicate_rows <- function(df, relation_cols) {"
"0","  # Identify columns with relation1 and values in corresponding relation columns"
"0","  relation1_cols <- grep(""relation1"", names(df), value = TRUE)"
"0","  relation_cols <- lapply(relation_cols, function(col) grep(col, names(df), value = TRUE))"
"0","  # Ensure the columns are paired correctly"
"0","  relation_pairs <- data.frame(relation1 = relation1_cols)"
"0","  for (i in seq_along(relation_cols)) {"
"0","    relation_pairs[paste0(""relation"", i + 1)] <- relation_cols[[i]]"
"0","  }"
"0","  # Function to duplicate rows based on a specific relation column"
"0","  duplicate_for_relation <- function(df, relation_pair) {"
"0","    rows_to_duplicate <- df %>% filter(rowSums(df[relation_pair] != ""."" & df[relation_pair] != """") > 0)"
"0","    duplicated_rows <- rows_to_duplicate"
"0","    for (i in 1:nrow(relation_pairs)) {"
"0","      duplicated_rows[[relation_pairs$relation1[i]]] <- rows_to_duplicate[[relation_pair[i]]]"
"0","    }"
"0","    return(duplicated_rows)"
"0","  }"
"0","  # Combine original and duplicated rows for each relation column"
"0","  duplicated_rows_list <- lapply(relation_cols, function(cols) duplicate_for_relation(df, cols))"
"0","  result <- bind_rows(df, do.call(bind_rows, duplicated_rows_list)) %>%"
"0","    arrange(ID_id, Task_model_type, Construct_Action_onset) %>%"
"0","    distinct()"
"0","  "
"0","  return(result)"
"0","}"
"0","# Apply the function to the data frame"
"0","relation_cols <- c(""relation2"", ""relation3"", ""relation4"")"
"0","data <- duplicate_rows(data, relation_cols)"

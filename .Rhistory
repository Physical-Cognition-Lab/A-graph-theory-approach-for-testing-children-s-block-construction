data$blocks_in[data$node_to == x][1]
} else {
NA
}
})
# Set edge attributes
E(g)$color <- ifelse(data$direction == "positive", "darkturquoise", "brown1")
# Create a layout with the sugiyama algorithm
layout <- layout_with_sugiyama(g)$layout
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Create a layout with the Fruchterman-Reingold algorithm
layout <- layout_with_fr(g)
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Adjust the y positions based on blocks_num and invert them
layout$y <- -V(g)$level
# Spread the nodes more evenly on the x-axis within each level
unique_y <- unique(layout$y)
for (y_val in unique_y) {
nodes_at_y <- layout[layout$y == y_val, ]
num_nodes <- nrow(nodes_at_y)
if (num_nodes > 1) {
layout$x[layout$y == y_val] <- seq(from = -num_nodes / 2, to = num_nodes / 2, length.out = num_nodes)
}
}
# Plot the graph using ggraph with the adjusted layout
p <- ggraph(g, layout = layout) +
geom_edge_link(data = edges %>% filter(!is.na(direction) & direction != "negative"), aes(colour = I(color), label = frequency, label_pos = 0.2)) +
geom_edge_arc(data = edges %>% filter(!is.na(direction) & direction == "negative"), aes(colour = I(color), label = frequency, label_pos = 0.2), curvature = 0.2) +
geom_node_point(aes(color = color), size = 15) +
scale_color_identity() +
theme_void() +
ggtitle(paste("Combined Network Graph for Model", model_name)) +
guides(color = FALSE, edge_color = FALSE, edge_width = FALSE)
# Save the plot as a PNG file in the "trees" folder
file_name <- paste0("trees/combined_network_graphs_", model_name, ".svg")
ggsave(file_name, plot = p, width = 32, height = 24)
}
# Process each data frame in the list
for (model_name in names(data_moves_list)) {
df <- data_moves_list[[model_name]]
# Create and save the combined network graph without highlights
create_combined_graph(df, model_name)
}
# Define the function to create and plot the combined network graph without highlights
create_combined_graph <- function(data, model_name) {
# Create a graph object using node_from and node_to columns for all data
g <- graph_from_data_frame(d = data %>% select(node_from, node_to, direction, state_correct, blocks_in, real_action_number, frequency), directed = TRUE)
# Set node attributes
V(g)$color <- ifelse(V(g)$name %in% data$node_to[data$state_correct], "green", "yellow")
V(g)$level <- sapply(V(g)$name, function(x) {
if (x %in% data$node_to) {
data$blocks_in[data$node_to == x][1]
} else {
NA
}
})
# Set edge attributes
E(g)$color <- ifelse(data$direction == "positive", "darkturquoise", "brown1")
# Create a layout with the sugiyama algorithm
layout <- layout_with_sugiyama(g)$layout
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Create a layout with the Fruchterman-Reingold algorithm
layout <- layout_with_fr(g)
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Adjust the y positions based on blocks_num and invert them
layout$y <- -V(g)$level
# Spread the nodes more evenly on the x-axis within each level
unique_y <- unique(layout$y)
for (y_val in unique_y) {
nodes_at_y <- layout[layout$y == y_val, ]
num_nodes <- nrow(nodes_at_y)
if (num_nodes > 1) {
layout$x[layout$y == y_val] <- seq(from = -num_nodes / 2, to = num_nodes / 2, length.out = num_nodes)
}
}
# Ensure the direction column is available and handle NAs
edges <- as_data_frame(g, what = "edges")
edges <- edges %>%
left_join(layout, by = c("from" = "name")) %>%
left_join(layout, by = c("to" = "name"), suffix = c(".from", ".to"))
# Plot the graph using ggraph with the adjusted layout
p <- ggraph(g, layout = layout) +
geom_edge_link(data = edges %>% filter(!is.na(direction) & direction != "negative"), aes(colour = I(color), label = frequency, label_pos = 0.2)) +
geom_edge_arc(data = edges %>% filter(!is.na(direction) & direction == "negative"), aes(colour = I(color), label = frequency, label_pos = 0.2), curvature = 0.2) +
geom_node_point(aes(color = color), size = 15) +
scale_color_identity() +
theme_void() +
ggtitle(paste("Combined Network Graph for Model", model_name)) +
guides(color = FALSE, edge_color = FALSE, edge_width = FALSE)
# Save the plot as a PNG file in the "trees" folder
file_name <- paste0("trees/combined_network_graphs_", model_name, ".svg")
ggsave(file_name, plot = p, width = 32, height = 24)
}
# Process each data frame in the list
for (model_name in names(data_moves_list)) {
df <- data_moves_list[[model_name]]
# Create and save the combined network graph without highlights
create_combined_graph(df, model_name)
}
# Define the function to create and plot the combined network graph without highlights
create_combined_graph <- function(data, model_name) {
# Create a graph object using node_from and node_to columns for all data
g <- graph_from_data_frame(d = data %>% select(node_from, node_to, direction, state_correct, blocks_in, real_action_number, frequency), directed = TRUE)
# Set node attributes
V(g)$color <- ifelse(V(g)$name %in% data$node_to[data$state_correct], "green", "yellow")
V(g)$level <- sapply(V(g)$name, function(x) {
if (x %in% data$node_to) {
data$blocks_in[data$node_to == x][1]
} else {
NA
}
})
# Set edge attributes
E(g)$color <- ifelse(data$direction == "positive", "darkturquoise", "brown1")
# Create a layout with the sugiyama algorithm
layout <- layout_with_sugiyama(g)$layout
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Create a layout with the Fruchterman-Reingold algorithm
layout <- layout_with_fr(g)
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Adjust the y positions based on blocks_num and invert them
layout$y <- -V(g)$level
# Spread the nodes more evenly on the x-axis within each level
unique_y <- unique(layout$y)
for (y_val in unique_y) {
nodes_at_y <- layout[layout$y == y_val, ]
num_nodes <- nrow(nodes_at_y)
if (num_nodes > 1) {
layout$x[layout$y == y_val] <- seq(from = -num_nodes / 2, to = num_nodes / 2, length.out = num_nodes)
}
}
# Plot the graph using ggraph with the adjusted layout
p <- ggraph(g, layout = layout) +
geom_edge_link(aes(colour = I(color), label = frequency, label_pos = 0.2)) +
geom_node_point(aes(color = color), size = 15, label = state) +
scale_color_identity() +
theme_void() +
ggtitle(paste("Combined Network Graph for Model", model_name)) +
guides(color = FALSE, edge_color = FALSE, edge_width = FALSE)
# Save the plot as a PNG file in the "trees" folder
file_name <- paste0("trees/combined_network_graphs_", model_name, ".svg")
ggsave(file_name, plot = p, width = 32, height = 24)
}
# Process each data frame in the list
for (model_name in names(data_moves_list)) {
df <- data_moves_list[[model_name]]
# Create and save the combined network graph without highlights
create_combined_graph(df, model_name)
}
# Define the function to create and plot the combined network graph without highlights
create_combined_graph <- function(data, model_name) {
# Create a graph object using node_from and node_to columns for all data
g <- graph_from_data_frame(d = data %>% select(node_from, node_to, direction, state_correct, blocks_in, real_action_number, frequency), directed = TRUE)
# Set node attributes
V(g)$color <- ifelse(V(g)$name %in% data$node_to[data$state_correct], "green", "yellow")
V(g)$level <- sapply(V(g)$name, function(x) {
if (x %in% data$node_to) {
data$blocks_in[data$node_to == x][1]
} else {
NA
}
})
# Set edge attributes
E(g)$color <- ifelse(data$direction == "positive", "darkturquoise", "brown1")
# Create a layout with the sugiyama algorithm
layout <- layout_with_sugiyama(g)$layout
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Create a layout with the Fruchterman-Reingold algorithm
layout <- layout_with_fr(g)
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Adjust the y positions based on blocks_num and invert them
layout$y <- -V(g)$level
# Spread the nodes more evenly on the x-axis within each level
unique_y <- unique(layout$y)
for (y_val in unique_y) {
nodes_at_y <- layout[layout$y == y_val, ]
num_nodes <- nrow(nodes_at_y)
if (num_nodes > 1) {
layout$x[layout$y == y_val] <- seq(from = -num_nodes / 2, to = num_nodes / 2, length.out = num_nodes)
}
}
# Plot the graph using ggraph with the adjusted layout
p <- ggraph(g, layout = layout) +
geom_edge_link(aes(colour = I(color), label = frequency, label_pos = 0.2)) +
geom_node_point(aes(color = color), size = 15, label = node_to) +
scale_color_identity() +
theme_void() +
ggtitle(paste("Combined Network Graph for Model", model_name)) +
guides(color = FALSE, edge_color = FALSE, edge_width = FALSE)
# Save the plot as a PNG file in the "trees" folder
file_name <- paste0("trees/combined_network_graphs_", model_name, ".svg")
ggsave(file_name, plot = p, width = 32, height = 24)
}
# Process each data frame in the list
for (model_name in names(data_moves_list)) {
df <- data_moves_list[[model_name]]
# Create and save the combined network graph without highlights
create_combined_graph(df, model_name)
}
# Define the function to create and plot the combined network graph without highlights
create_combined_graph <- function(data, model_name) {
# Create a graph object using node_from and node_to columns for all data
g <- graph_from_data_frame(d = data %>% select(node_from, node_to, direction, state_correct, blocks_in, real_action_number, frequency), directed = TRUE)
# Set node attributes
V(g)$color <- ifelse(V(g)$name %in% data$node_to[data$state_correct], "green", "yellow")
V(g)$level <- sapply(V(g)$name, function(x) {
if (x %in% data$node_to) {
data$blocks_in[data$node_to == x][1]
} else {
NA
}
})
# Set edge attributes
E(g)$color <- ifelse(data$direction == "positive", "darkturquoise", "brown1")
# Create a layout with the sugiyama algorithm
layout <- layout_with_sugiyama(g)$layout
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Create a layout with the Fruchterman-Reingold algorithm
layout <- layout_with_fr(g)
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Adjust the y positions based on blocks_num and invert them
layout$y <- -V(g)$level
# Spread the nodes more evenly on the x-axis within each level
unique_y <- unique(layout$y)
for (y_val in unique_y) {
nodes_at_y <- layout[layout$y == y_val, ]
num_nodes <- nrow(nodes_at_y)
if (num_nodes > 1) {
layout$x[layout$y == y_val] <- seq(from = -num_nodes / 2, to = num_nodes / 2, length.out = num_nodes)
}
}
# Plot the graph using ggraph with the adjusted layout
p <- ggraph(g, layout = layout) +
geom_edge_link(aes(colour = I(color), label = frequency, label_pos = 0.2)) +
geom_node_point(aes(color = color), size = 15) +
scale_color_identity() +
theme_void() +
ggtitle(paste("Combined Network Graph for Model", model_name)) +
guides(color = FALSE, edge_color = FALSE, edge_width = FALSE)
# Save the plot as a PNG file in the "trees" folder
file_name <- paste0("trees/combined_network_graphs_", model_name, ".svg")
ggsave(file_name, plot = p, width = 32, height = 24)
}
# Process each data frame in the list
for (model_name in names(data_moves_list)) {
df <- data_moves_list[[model_name]]
# Create and save the combined network graph without highlights
create_combined_graph(df, model_name)
}
# Define the function to create and plot the combined network graph without highlights
create_combined_graph <- function(data, model_name) {
# Create a graph object using node_from and node_to columns for all data
g <- graph_from_data_frame(d = data %>% select(node_from, node_to, direction, state_correct, blocks_in, real_action_number, frequency), directed = TRUE)
# Set node attributes
V(g)$color <- ifelse(V(g)$name %in% data$node_to[data$state_correct], "green", "yellow")
V(g)$level <- sapply(V(g)$name, function(x) {
if (x %in% data$node_to) {
data$blocks_in[data$node_to == x][1]
} else {
NA
}
})
# Set edge attributes
E(g)$color <- ifelse(data$direction == "positive", "darkturquoise", "brown1")
# Create a layout with the Fruchterman-Reingold algorithm
layout <- layout_with_fr(g)
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Adjust the y positions based on blocks_num and invert them
layout$y <- -V(g)$level
# Spread the nodes more evenly on the x-axis within each level
unique_y <- unique(layout$y)
for (y_val in unique_y) {
nodes_at_y <- layout[layout$y == y_val, ]
num_nodes <- nrow(nodes_at_y)
if (num_nodes > 1) {
layout$x[layout$y == y_val] <- seq(from = -num_nodes / 2, to = num_nodes / 2, length.out = num_nodes)
}
}
# Plot the graph using ggraph with the adjusted layout
p <- ggraph(g, layout = layout) +
geom_edge_link(aes(colour = I(color), label = frequency, label_pos = 0.2)) +
geom_node_point(aes(color = color), size = 15) +
scale_color_identity() +
theme_void() +
ggtitle(paste("Combined Network Graph for Model", model_name)) +
guides(color = FALSE, edge_color = FALSE, edge_width = FALSE)
# Save the plot as a PNG file in the "trees" folder
file_name <- paste0("trees/combined_network_graphs_", model_name, ".svg")
ggsave(file_name, plot = p, width = 32, height = 24)
}
# Process each data frame in the list
for (model_name in names(data_moves_list)) {
df <- data_moves_list[[model_name]]
# Create and save the combined network graph without highlights
create_combined_graph(df, model_name)
}
# Define the function to create and plot the combined network graph without highlights
create_combined_graph <- function(data, model_name) {
# Create a graph object using node_from and node_to columns for all data
g <- graph_from_data_frame(d = data %>% select(node_from, node_to, direction, state_correct, blocks_in, real_action_number, frequency), directed = TRUE)
# Set node attributes
V(g)$color <- ifelse(V(g)$name %in% data$node_to[data$state_correct], "green", "yellow")
V(g)$level <- sapply(V(g)$name, function(x) {
if (x %in% data$node_to) {
data$blocks_in[data$node_to == x][1]
} else {
NA
}
})
# Set edge attributes
E(g)$color <- ifelse(data$direction == "positive", "darkturquoise", "brown1")
# Create a layout with the Fruchterman-Reingold algorithm
layout <- layout_with_sugiyama(g)
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Adjust the y positions based on blocks_num and invert them
layout$y <- -V(g)$level
# Spread the nodes more evenly on the x-axis within each level
unique_y <- unique(layout$y)
for (y_val in unique_y) {
nodes_at_y <- layout[layout$y == y_val, ]
num_nodes <- nrow(nodes_at_y)
if (num_nodes > 1) {
layout$x[layout$y == y_val] <- seq(from = -num_nodes / 2, to = num_nodes / 2, length.out = num_nodes)
}
}
# Plot the graph using ggraph with the adjusted layout
p <- ggraph(g, layout = layout) +
geom_edge_link(aes(colour = I(color), label = frequency, label_pos = 0.2)) +
geom_node_point(aes(color = color), size = 15) +
scale_color_identity() +
theme_void() +
ggtitle(paste("Combined Network Graph for Model", model_name)) +
guides(color = FALSE, edge_color = FALSE, edge_width = FALSE)
# Save the plot as a PNG file in the "trees" folder
file_name <- paste0("trees/combined_network_graphs_", model_name, ".svg")
ggsave(file_name, plot = p, width = 32, height = 24)
}
# Process each data frame in the list
for (model_name in names(data_moves_list)) {
df <- data_moves_list[[model_name]]
# Create and save the combined network graph without highlights
create_combined_graph(df, model_name)
}
# Define the function to create and plot the combined network graph without highlights
create_combined_graph <- function(data, model_name) {
# Create a graph object using node_from and node_to columns for all data
g <- graph_from_data_frame(d = data %>% select(node_from, node_to, direction, state_correct, blocks_in, real_action_number, frequency), directed = TRUE)
# Set node attributes
V(g)$color <- ifelse(V(g)$name %in% data$node_to[data$state_correct], "green", "yellow")
V(g)$level <- sapply(V(g)$name, function(x) {
if (x %in% data$node_to) {
data$blocks_in[data$node_to == x][1]
} else {
NA
}
})
# Set edge attributes
E(g)$color <- ifelse(data$direction == "positive", "darkturquoise", "brown1")
# Create a layout with the Fruchterman-Reingold algorithm
layout <- layout_with_fr(g)
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Adjust the y positions based on blocks_num and invert them
layout$y <- -V(g)$level
# Spread the nodes more evenly on the x-axis within each level
unique_y <- unique(layout$y)
for (y_val in unique_y) {
nodes_at_y <- layout[layout$y == y_val, ]
num_nodes <- nrow(nodes_at_y)
if (num_nodes > 1) {
layout$x[layout$y == y_val] <- seq(from = -num_nodes / 2, to = num_nodes / 2, length.out = num_nodes)
}
}
# Plot the graph using ggraph with the adjusted layout
p <- ggraph(g, layout = layout) +
geom_edge_link(aes(colour = I(color), label = frequency, label_pos = 0.2)) +
geom_node_point(aes(color = color), size = 15) +
scale_color_identity() +
theme_void() +
ggtitle(paste("Combined Network Graph for Model", model_name)) +
guides(color = FALSE, edge_color = FALSE, edge_width = FALSE)
# Save the plot as a PNG file in the "trees" folder
file_name <- paste0("trees/combined_network_graphs_", model_name, ".svg")
ggsave(file_name, plot = p, width = 32, height = 24)
}
# Process each data frame in the list
for (model_name in names(data_moves_list)) {
df <- data_moves_list[[model_name]]
# Create and save the combined network graph without highlights
create_combined_graph(df, model_name)
}
# Define the function to create and plot the combined network graph without highlights
create_combined_graph <- function(data, model_name) {
# Create a graph object using node_from and node_to columns for all data
g <- graph_from_data_frame(d = data %>% select(node_from, node_to, direction, state_correct, blocks_in, real_action_number, frequency), directed = TRUE)
# Set node attributes
V(g)$color <- ifelse(V(g)$name %in% data$node_to[data$state_correct], "green", "yellow")
V(g)$level <- sapply(V(g)$name, function(x) {
if (x %in% data$node_to) {
data$blocks_in[data$node_to == x][1]
} else {
NA
}
})
# Set edge attributes
E(g)$color <- ifelse(data$direction == "positive", "darkturquoise", "brown1")
# Create a layout with the Fruchterman-Reingold algorithm
layout <- layout_with_fr(g)
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Adjust the y positions based on blocks_num and invert them
layout$y <- -V(g)$level
# Spread the nodes more evenly on the x-axis within each level
unique_y <- unique(layout$y)
for (y_val in unique_y) {
nodes_at_y <- layout[layout$y == y_val, ]
num_nodes <- nrow(nodes_at_y)
if (num_nodes > 1) {
layout$x[layout$y == y_val] <- seq(from = -num_nodes / 2, to = num_nodes / 2, length.out = num_nodes)
}
}
# Plot the graph using ggraph with the adjusted layout
p <- ggraph(g, layout = layout) +
geom_edge_link(aes(colour = I(color), label = frequency, label_pos = 0.2)) +
geom_node_point(aes(color = color), size = 15) +
scale_color_identity() +
theme_void() +
ggtitle(paste("Combined Network Graph for Model", model_name)) +
guides(color = FALSE, edge_color = FALSE, edge_width = FALSE)
# Print the plot
print(p)
}
# Process each data frame in the list
for (model_name in names(data_moves_list)) {
df <- data_moves_list[[model_name]]
# Create and print the combined network graph without highlights
create_combined_graph(df, model_name)
}
# Define the function to create and plot the combined network graph without highlights
create_combined_graph <- function(data, model_name) {
# Create a graph object using node_from and node_to columns for all data
g <- graph_from_data_frame(d = data %>% select(node_from, node_to, direction, state_correct, blocks_in, real_action_number, frequency), directed = TRUE)
# Set node attributes
V(g)$color <- ifelse(V(g)$name %in% data$node_to[data$state_correct], "green", "yellow")
V(g)$level <- sapply(V(g)$name, function(x) {
if (x %in% data$node_to) {
data$blocks_in[data$node_to == x][1]
} else {
NA
}
})
# Set edge attributes
E(g)$color <- ifelse(data$direction == "positive", "darkturquoise", "brown1")
# Create a layout with the Fruchterman-Reingold algorithm
layout <- layout_with_fr(g)
layout <- as.data.frame(layout)
colnames(layout) <- c("x", "y")
layout$name <- V(g)$name
# Adjust the y positions based on blocks_num and invert them
layout$y <- -V(g)$level
# Spread the nodes more evenly on the x-axis within each level
unique_y <- unique(layout$y)
for (y_val in unique_y) {
nodes_at_y <- layout[layout$y == y_val, ]
num_nodes <- nrow(nodes_at_y)
if (num_nodes > 1) {
layout$x[layout$y == y_val] <- seq(from = -num_nodes / 2, to = num_nodes / 2, length.out = num_nodes)
}
}
# Plot the graph using ggraph with the adjusted layout
p <- ggraph(g, layout = layout) +
geom_edge_link(aes(colour = I(color), label = frequency, label_pos = 0.2)) +
geom_node_point(aes(color = color), size = 15) +
scale_color_identity() +
theme_void() +
ggtitle(paste("Combined Network Graph for Model", model_name)) +
guides(color = FALSE, edge_color = FALSE, edge_width = FALSE)
# Print the plot
print(p)
}
# Process each data frame in the list
for (model_name in names(data_moves_list)) {
df <- data_moves_list[[model_name]]
# Create and print the combined network graph without highlights
create_combined_graph(df, model_name)
}
